// Generated from src/coffee4/Coffee4.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CoffeeLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly PACKAGE_NAME = 14;
	public static readonly TYPE_NAME = 15;
	public static readonly WS = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "PACKAGE_NAME", "TYPE_NAME", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'package'", "';'", "'public'", "'interface'", "'{'", "'}'", 
		"'class'", "'func'", "'('", "')'", "'String'", "'Int'", "'Bool'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"PACKAGE_NAME", "TYPE_NAME", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CoffeeLexer._LITERAL_NAMES, CoffeeLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CoffeeLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CoffeeLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Coffee4.g4"; }

	// @Override
	public get ruleNames(): string[] { return CoffeeLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CoffeeLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CoffeeLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CoffeeLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12t\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x06\x0Fc\n\x0F\r\x0F\x0E\x0Fd\x03\x10\x03\x10\x07\x10i\n\x10" +
		"\f\x10\x0E\x10l\v\x10\x03\x11\x06\x11o\n\x11\r\x11\x0E\x11p\x03\x11\x03" +
		"\x11\x02\x02\x02\x12\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
		"\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12\x03\x02\x06\x03\x02" +
		"c|\x04\x02C\\c|\x05\x022;C\\c|\x05\x02\v\f\x0F\x0F\"\"\x02v\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x03#\x03\x02\x02\x02\x05+\x03\x02\x02\x02\x07-\x03\x02\x02\x02" +
		"\t4\x03\x02\x02\x02\v>\x03\x02\x02\x02\r@\x03\x02\x02\x02\x0FB\x03\x02" +
		"\x02\x02\x11H\x03\x02\x02\x02\x13M\x03\x02\x02\x02\x15O\x03\x02\x02\x02" +
		"\x17Q\x03\x02\x02\x02\x19X\x03\x02\x02\x02\x1B\\\x03\x02\x02\x02\x1Db" +
		"\x03\x02\x02\x02\x1Ff\x03\x02\x02\x02!n\x03\x02\x02\x02#$\x07r\x02\x02" +
		"$%\x07c\x02\x02%&\x07e\x02\x02&\'\x07m\x02\x02\'(\x07c\x02\x02()\x07i" +
		"\x02\x02)*\x07g\x02\x02*\x04\x03\x02\x02\x02+,\x07=\x02\x02,\x06\x03\x02" +
		"\x02\x02-.\x07r\x02\x02./\x07w\x02\x02/0\x07d\x02\x0201\x07n\x02\x021" +
		"2\x07k\x02\x0223\x07e\x02\x023\b\x03\x02\x02\x0245\x07k\x02\x0256\x07" +
		"p\x02\x0267\x07v\x02\x0278\x07g\x02\x0289\x07t\x02\x029:\x07h\x02\x02" +
		":;\x07c\x02\x02;<\x07e\x02\x02<=\x07g\x02\x02=\n\x03\x02\x02\x02>?\x07" +
		"}\x02\x02?\f\x03\x02\x02\x02@A\x07\x7F\x02\x02A\x0E\x03\x02\x02\x02BC" +
		"\x07e\x02\x02CD\x07n\x02\x02DE\x07c\x02\x02EF\x07u\x02\x02FG\x07u\x02" +
		"\x02G\x10\x03\x02\x02\x02HI\x07h\x02\x02IJ\x07w\x02\x02JK\x07p\x02\x02" +
		"KL\x07e\x02\x02L\x12\x03\x02\x02\x02MN\x07*\x02\x02N\x14\x03\x02\x02\x02" +
		"OP\x07+\x02\x02P\x16\x03\x02\x02\x02QR\x07U\x02\x02RS\x07v\x02\x02ST\x07" +
		"t\x02\x02TU\x07k\x02\x02UV\x07p\x02\x02VW\x07i\x02\x02W\x18\x03\x02\x02" +
		"\x02XY\x07K\x02\x02YZ\x07p\x02\x02Z[\x07v\x02\x02[\x1A\x03\x02\x02\x02" +
		"\\]\x07D\x02\x02]^\x07q\x02\x02^_\x07q\x02\x02_`\x07n\x02\x02`\x1C\x03" +
		"\x02\x02\x02ac\t\x02\x02\x02ba\x03\x02\x02\x02cd\x03\x02\x02\x02db\x03" +
		"\x02\x02\x02de\x03\x02\x02\x02e\x1E\x03\x02\x02\x02fj\t\x03\x02\x02gi" +
		"\t\x04\x02\x02hg\x03\x02\x02\x02il\x03\x02\x02\x02jh\x03\x02\x02\x02j" +
		"k\x03\x02\x02\x02k \x03\x02\x02\x02lj\x03\x02\x02\x02mo\t\x05\x02\x02" +
		"nm\x03\x02\x02\x02op\x03\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02\x02" +
		"qr\x03\x02\x02\x02rs\b\x11\x02\x02s\"\x03\x02\x02\x02\x06\x02djp\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CoffeeLexer.__ATN) {
			CoffeeLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CoffeeLexer._serializedATN));
		}

		return CoffeeLexer.__ATN;
	}

}

